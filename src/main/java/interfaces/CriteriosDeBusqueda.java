/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaces;

import conexion.conexion;
import interfaces.IngresoDeInformaciónDelPasajero;
import interfaces.VueloDAO;
import java.awt.GridLayout;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SFTA
 */
public class CriteriosDeBusqueda extends javax.swing.JFrame {
     
    conexion cone =new conexion();
    Connection cn=cone.conectar();
    

    private int adultos;
    private int menores;
    
     
    public CriteriosDeBusqueda() {
        initComponents();
        setLocationRelativeTo(null);
        cargarVuelos();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnContinuar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaVuelos = new javax.swing.JTable();
        comboOrigen = new javax.swing.JComboBox<>();
        comboDestino = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        spinnerAdultos = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        spinnerMenores = new javax.swing.JSpinner();
        DateFechaViaje = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        comboClase = new javax.swing.JComboBox<>();
        btnResultadoReserva = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaResultadoReserva = new javax.swing.JTable();
        DateFechaVuelta = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(102, 153, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 102));
        jLabel1.setText("Origen");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 39, -1, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 102));
        jLabel2.setText("Destino");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 103, -1, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 102));
        jLabel3.setText("Fecha ida");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 164, -1, -1));

        btnContinuar.setBackground(new java.awt.Color(102, 153, 255));
        btnContinuar.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnContinuar.setForeground(new java.awt.Color(255, 255, 255));
        btnContinuar.setText("Continuar");
        btnContinuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContinuarActionPerformed(evt);
            }
        });
        jPanel1.add(btnContinuar, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 530, 146, -1));

        tablaVuelos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)));
        tablaVuelos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaVuelos);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(348, 65, 922, 327));

        comboOrigen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mendoza", "Buenos Aires", "Cordoba",  }));
        comboOrigen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)));
        comboOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboOrigenActionPerformed(evt);
            }
        });
        jPanel1.add(comboOrigen, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 65, 278, -1));

        comboDestino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{}));
        comboDestino.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)));
        comboDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDestinoActionPerformed(evt);
            }
        });
        actualizarComboDestino();
        jPanel1.add(comboDestino, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 129, 278, -1));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 102));
        jLabel5.setText("Criterios de búsqueda");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 21)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 102));
        jLabel6.setText("Vuelos disponibles");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 20, -1, 25));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 102));
        jLabel7.setText("Pasajeros");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 234, -1, -1));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 51, 102));
        jLabel8.setText("Adultos Mayores De 18 Años");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 266, -1, -1));

        spinnerAdultos.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        spinnerAdultos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)));
        jPanel1.add(spinnerAdultos, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 267, -1, -1));
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 386, -1, -1));

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 51, 102));
        jLabel11.setText("Niños Menores De 18 Años");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 296, -1, -1));

        spinnerMenores.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        spinnerMenores.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)));
        jPanel1.add(spinnerMenores, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 297, -1, -1));

        DateFechaViaje.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)));
        jPanel1.add(DateFechaViaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 190, 123, -1));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 102));
        jLabel4.setText("Clase");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 322, -1, -1));

        comboClase.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Primera Clase", "Business", "Económica", }));
        comboClase.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)));
        jPanel1.add(comboClase, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 354, 272, -1));

        btnResultadoReserva.setBackground(new java.awt.Color(102, 153, 255));
        btnResultadoReserva.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnResultadoReserva.setForeground(new java.awt.Color(255, 255, 255));
        btnResultadoReserva.setText("Resultado de búsqueda");
        btnResultadoReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResultadoReservaActionPerformed(evt);
            }
        });
        jPanel1.add(btnResultadoReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(53, 397, -1, 23));

        tablaResultadoReserva.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)));
        tablaResultadoReserva.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaResultadoReserva);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 438, 1264, 85));

        DateFechaVuelta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)));
        jPanel1.add(DateFechaVuelta, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 190, 121, -1));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 51, 102));
        jLabel10.setText("Fecha vuelta");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 164, -1, -1));

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setToolTipText("");
        jLabel12.setOpaque(true);
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 290, 420));

        jLabel13.setIcon(new javax.swing.ImageIcon("C:\\Users\\USUARIO\\OneDrive\\Escritorio\\Imagenes Boleto de Avion\\Otras nubes.jpeg")); // NOI18N
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 580));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 1290, 580));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDestinoActionPerformed

    }//GEN-LAST:event_comboDestinoActionPerformed

    private void comboOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboOrigenActionPerformed
        actualizarComboDestino();
    }//GEN-LAST:event_comboOrigenActionPerformed

    private void btnContinuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContinuarActionPerformed
    adultos = (int) spinnerAdultos.getValue();
    menores = (int) spinnerMenores.getValue();
    Date fechaViaje = DateFechaViaje.getDate();
    Date fechaVuelta = DateFechaVuelta.getDate();
    
    if (adultos == 0 && menores == 0) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar al menos un adulto o un menor.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
      // Verificación adicional: No se permite ingresar solo menores sin adultos
    if (adultos == 0 && menores > 0) {
        JOptionPane.showMessageDialog(this, "Un menor no puede viajar solo. Debe haber al menos un adulto en la reserva.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
      if (fechaViaje == null || fechaVuelta == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fecha de ida y vuelta.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!fechaVuelta.after(fechaViaje)) {
            JOptionPane.showMessageDialog(this, "La fecha de vuelta debe ser posterior a la fecha de ida.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    // Verificar si un vuelo ha sido seleccionado
    boolean vueloSeleccionado = false;
    for (int i = 0; i < tablaResultadoReserva.getRowCount(); i++) {
        if ((boolean) tablaResultadoReserva.getValueAt(i, 14)) { 
            vueloSeleccionado = true;
            break;
        }
    }
    
    if (!vueloSeleccionado) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un vuelo antes de continuar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return; // Salir del método si no se ha seleccionado un vuelo
    }
    
    // Crear el modelo de la tabla
    DefaultTableModel modelo = (DefaultTableModel) tablaResultadoReserva.getModel();
    // Guardar en la base de datos
    guardarEnBaseDeDatos(modelo);
    
    new IngresoDeInformaciónDelPasajero(adultos, menores, fechaViaje).setVisible(true);
    }//GEN-LAST:event_btnContinuarActionPerformed
// 
    private void btnResultadoReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResultadoReservaActionPerformed
    String origen = comboOrigen.getSelectedItem().toString();
    String destino = comboDestino.getSelectedItem().toString();
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    String fecha = sdf.format(DateFechaViaje.getDate());
    String fechaVuelta = sdf.format(DateFechaVuelta.getDate());
    int adultos = (Integer) spinnerAdultos.getValue();
    int ninos = (Integer) spinnerMenores.getValue();
    String clase = comboClase.getSelectedItem().toString();
    
    // Datos adicionales de vuelos
    String aerolinea1 = "", aerolinea2 = "";
    String horarioSalida1 = "", horarioSalida2 = "";
    String duracionViaje1 = "", duracionViaje2 = "";

    if (origen.equals("Mendoza") && destino.equals("Buenos Aires")) {
        aerolinea1 = "Aerolineas Argentinas";
        horarioSalida1 = "08:00:00";
        duracionViaje1 = "01:30:00";
        aerolinea2 = "Flybondi";
        horarioSalida2 = "06:30:00";
        duracionViaje2 = "01:35:00";
    } else if (origen.equals("Buenos Aires") && destino.equals("Cordoba")) {
        aerolinea1 = "LATAM";
        horarioSalida1 = "09:00:00";
        duracionViaje1 = "01:20:00";
        aerolinea2 = "Aerolineas Argentinas";
        horarioSalida2 = "11:00:00";
        duracionViaje2 = "01:15:00";
    } else if (origen.equals("Cordoba") && destino.equals("Mendoza")) {
        aerolinea1 = "Flybondi";
        horarioSalida1 = "10:00:00";
        duracionViaje1 = "01:10:00";
        aerolinea2 = "LATAM";
        horarioSalida2 = "13:30:00";
        duracionViaje2 = "01:20:00";
    } else if (origen.equals("Mendoza") && destino.equals("Cordoba")) {
        aerolinea1 = "Flybondi";
        horarioSalida1 = "12:00:00";
        duracionViaje1 = "01:15:00";
        aerolinea2 = "Aerolineas Argentinas";
        horarioSalida2 = "15:00:00";
        duracionViaje2 = "01:10:00";
    } else if (origen.equals("Buenos Aires") && destino.equals("Mendoza")) {
        aerolinea1 = "Aerolineas Argentinas";
        horarioSalida1 = "17:00:00";
        duracionViaje1 = "01:40:00";
        aerolinea2 = "Flybondi";
        horarioSalida2 = "20:00:00";
        duracionViaje2 = "01:30:00";
    } else if (origen.equals("Cordoba") && destino.equals("Buenos Aires")) {
        aerolinea1 = "LATAM";
        horarioSalida1 = "19:00:00";
        duracionViaje1 = "01:25:00";
        aerolinea2 = "Aerolineas Argentinas";
        horarioSalida2 = "21:30:00";
        duracionViaje2 = "01:20:00";
    }

    // Definir precios
    int precioAdulto = 0;
    int precioNino = 0;
    switch (clase) {
        case "Primera Clase":
            precioAdulto = 50000;
            precioNino = 30000;
            break;
        case "Business":
            precioAdulto = 30000;
            precioNino = 20000;
            break;
        case "Económica":
            precioAdulto = 20000;
            precioNino = 10000;
            break;
    }

    // Generar ticket de vuelo
    String ticketVuelo1 = generarTicketVuelo();
    String ticketVuelo2 = generarTicketVuelo();

    // Calcular precios
    int precioTotalAdultos = adultos * precioAdulto;
    int precioTotalNinos = ninos * precioNino;
    int precioFinal = precioTotalAdultos + precioTotalNinos;

    // Crear el modelo de la tabla
    DefaultTableModel model = (DefaultTableModel) tablaResultadoReserva.getModel();
    model.setRowCount(0); // Limpiar la tabla
    model.setColumnIdentifiers(new Object[]{
        "Origen", "Destino", "Fecha Ida", "Fecha Vuelta", "Adultos", "Niños", "Clase", "Aerolínea", 
        "Hora de Salida", "Duración", "Ticket de Vuelo", "Precio Adultos", "Precio Niños", "Precio Final", "Seleccionar"
    });

    // Añadir los datos del primer vuelo a la tabla
    model.addRow(new Object[]{
        origen,
        destino,
        fecha,
        fechaVuelta,
        adultos,
        ninos,
        clase,
        aerolinea1,
        horarioSalida1,
        duracionViaje1,
        ticketVuelo1,
        adultos + " x " + precioAdulto + " = " + precioTotalAdultos,
        ninos + " x " + precioNino + " = " + precioTotalNinos,
        precioFinal,
        Boolean.FALSE // Columna de selección
    });

    // Añadir los datos del segundo vuelo a la tabla
    model.addRow(new Object[]{
        origen,
        destino,
        fecha,
        fechaVuelta,
        adultos,
        ninos,
        clase,
        aerolinea2,
        horarioSalida2,
        duracionViaje2,
        ticketVuelo2,
        adultos + " x " + precioAdulto + " = " + precioTotalAdultos,
        ninos + " x " + precioNino + " = " + precioTotalNinos,
        precioFinal,
        Boolean.FALSE // Columna de selección
    });

    // Configurar la tabla para mostrar checkboxes en la columna de selección
    tablaResultadoReserva.getColumnModel().getColumn(14).setCellEditor(new DefaultCellEditor(new JCheckBox()));
    tablaResultadoReserva.getColumnModel().getColumn(14).setCellRenderer(tablaResultadoReserva.getDefaultRenderer(Boolean.class));

    // Listener para manejar la selección del vuelo
    tablaResultadoReserva.getModel().addTableModelListener(new TableModelListener() {
        public void tableChanged(TableModelEvent e) {
            if (e.getColumn() == 14) { // Columna de selección
                int row = e.getFirstRow();
                Boolean isSelected = (Boolean) tablaResultadoReserva.getValueAt(row, 14);
                if (isSelected) {
                    // Si se selecciona un vuelo, deseleccionar los demás
                    for (int i = 0; i < tablaResultadoReserva.getRowCount(); i++) {
                        if (i != row) {
                            tablaResultadoReserva.setValueAt(false, i, 14);
                        }
                    }
                }
            }
        }
    });
// Configurar la fecha de vuelta automáticamente al seleccionar la fecha de ida
DateFechaViaje.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
    public void propertyChange(java.beans.PropertyChangeEvent evt) {
        if ("date".equals(evt.getPropertyName())) {
            java.util.Date fechaIda = DateFechaViaje.getDate();
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.setTime(fechaIda);
            cal.add(java.util.Calendar.DAY_OF_MONTH, 1);
            DateFechaVuelta.setDate(cal.getTime());
            DateFechaVuelta.getJCalendar().setMinSelectableDate(cal.getTime());
            DateFechaVuelta.setEnabled(false); // Hacer que no se pueda editar
        }
    }
});    

    }//GEN-LAST:event_btnResultadoReservaActionPerformed
    // Método para generar un ticket de vuelo aleatorio
    private String generarTicketVuelo() {
    String caracteres = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    StringBuilder ticket = new StringBuilder();
    Random rnd = new Random();
    while (ticket.length() < 10) { // longitud del ticket
        int index = (int) (rnd.nextFloat() * caracteres.length());
        ticket.append(caracteres.charAt(index));
    }
    return ticket.toString();
}
    
    private void actualizarComboDestino() {
        comboDestino.removeAllItems();
        String origenSeleccionado = (String) comboOrigen.getSelectedItem();
        for (String ciudad : new String[]{"Mendoza", "Buenos Aires", "Cordoba"}) {
            if (!ciudad.equals(origenSeleccionado)) {
                comboDestino.addItem(ciudad);
            }
        }
    }
   
    private void cargarVuelos() {
        VueloDAO vuelosDAO = new VueloDAO(cn);
        DefaultTableModel tableModel = vuelosDAO.obtenerVuelos();
        tablaVuelos.setModel(tableModel);
    }

   
     public void guardarEnBaseDeDatos(DefaultTableModel modelo) {
    String origen = comboOrigen.getSelectedItem().toString();
    String destino = comboDestino.getSelectedItem().toString();
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    String fecha = sdf.format(DateFechaViaje.getDate());
    String fechaVuelta = sdf.format(DateFechaVuelta.getDate());
    int adultos = (Integer) spinnerAdultos.getValue();
    int ninos = (Integer) spinnerMenores.getValue();
    String clase = comboClase.getSelectedItem().toString();
     int precioAdulto = 0;
    int precioNino = 0;
    switch (clase) {
        case "Primera Clase":
            precioAdulto = 50000;
            precioNino = 30000;
            break;
        case "Business":
            precioAdulto = 30000;
            precioNino = 20000;
            break;
        case "Económica":
            precioAdulto = 20000;
            precioNino = 10000;
            break;
    }
    int precioTotalAdultos = adultos * precioAdulto;
    int precioTotalNinos = ninos * precioNino;
    int precioFinal = precioTotalAdultos + precioTotalNinos;
String consulta = "INSERT INTO vuelos_pendientes (Origen, Destino, FechaIda, FechaVuelta, Adultos, Niños, Clase, PrecioAdultos, PrecioNiños, PrecioFinal)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
     try {
            PreparedStatement preparedStatement = cn.prepareStatement(consulta);
            preparedStatement.setString(1, origen);
            preparedStatement.setString(2, destino);
            preparedStatement.setString(3, fecha);
            preparedStatement.setString(4, fechaVuelta);
            preparedStatement.setInt(5, adultos);
            preparedStatement.setInt(6, ninos);
            preparedStatement.setString(7, clase);
            preparedStatement.setInt(8, precioTotalAdultos);
            preparedStatement.setInt(9,precioTotalNinos);
             preparedStatement.setInt(10,precioFinal);

            int filasAfectadas = preparedStatement.executeUpdate();

            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(this, "Datos guardados exitosamente para un vuelo pendiente.");
            } else {
                JOptionPane.showMessageDialog(this, "Error al guardar los datos.");
            }
            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al conectar con la base de datos.");
        }         
     }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DateFechaViaje;
    private com.toedter.calendar.JDateChooser DateFechaVuelta;
    private javax.swing.JButton btnContinuar;
    private javax.swing.JButton btnResultadoReserva;
    private javax.swing.JComboBox<String> comboClase;
    private javax.swing.JComboBox<String> comboDestino;
    private javax.swing.JComboBox<String> comboOrigen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner spinnerAdultos;
    private javax.swing.JSpinner spinnerMenores;
    private javax.swing.JTable tablaResultadoReserva;
    private javax.swing.JTable tablaVuelos;
    // End of variables declaration//GEN-END:variables
}
